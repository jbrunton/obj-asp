plus = letrec plus:Nat -> Nat -> Nat =
    lambda m:Nat.
        lambda n:Nat.
            if iszero m then n else succ(plus (pred m) n)
    in plus;

times = letrec times:Nat -> Nat -> Nat =
    lambda m:Nat.
        lambda n:Nat.
            if iszero m then 0 else plus n (times (pred m) n)
    in times;

fib = letrec fib:Nat -> Nat =
    lambda k:Nat.
        if iszero k then 0
        else if iszero (pred k) then 1
        else plus (fib (pred k)) (fib (pred (pred k))) in
    fib;

fac = letrec fac:Nat -> Nat =
    lambda k:Nat.
        if iszero (pred k) then 1
        else times k (fac (pred k)) in
    fac;
    
fib 5;
fac 5;